import React, { useState, useEffect, useRef } from 'react';
import { Editor } from '@tiptap/react';
import { 
  FaPlus, FaMinus, FaTrash, FaBold, FaItalic, FaStrikethrough, FaUnderline, 
  FaSuperscript, FaSubscript, FaFont, FaFillDrip 
} from 'react-icons/fa';

interface EditorToolbarProps {
  editor: Editor;
  onAddBlock: () => void;
}

const fontOptions = [
  'Arial', 'Arial Black', 'Brush Script MT', 'Calibri', 'Cambria', 'Candara', 'Comic Sans MS', 'Consolas',
  'Constantia', 'Corbel', 'Courier New', 'Franklin Gothic Medium', 'Garamond', 'Georgia', 'Gill Sans',
  'Helvetica', 'Impact', 'Lucida Console', 'Lucida Sans Unicode', 'Optima', 'Palatino Linotype', 'Segoe Print',
  'Segoe Script', 'Segoe UI', 'Tahoma', 'Times New Roman', 'Trebuchet MS', 'Verdana',
];

// –ü–∞–ª–∏—Ç—Ä–∞: 10 –±–∞–∑–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤, 5 –æ—Ç—Ç–µ–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–π (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ –≤ Word)
const colorPalette = [
  ['#000000', '#404040', '#808080', '#BFBFBF', '#FFFFFF'],
  ['#7F0E0E', '#B22222', '#E57373', '#F8BBD0', '#FFEBEE'],
  ['#7F3F00', '#D2691E', '#FFB74D', '#FFE0B2', '#FFF3E0'],
  ['#7F6A00', '#DAA520', '#FFD54F', '#FFF9C4', '#FFFDE7'],
  ['#2E7D32', '#4CAF50', '#81C784', '#C8E6C9', '#F1F8E9'],
  ['#00695C', '#26A69A', '#4DB6AC', '#B2DFDB', '#E0F2F1'],
  ['#01579B', '#2196F3', '#64B5F6', '#BBDEFB', '#E3F2FD'],
  ['#1A237E', '#3F51B5', '#7986CB', '#C5CAE9', '#E8EAF6'],
  ['#4A148C', '#9C27B0', '#BA68C8', '#E1BEE7', '#F3E5F5'],
  ['#880E4F', '#E91E63', '#F06292', '#F9C1D9', '#FCE4EC'],
];

const ColorPicker: React.FC<{ onSelect: (color: string) => void }> = ({ onSelect }) => (
  <div className="grid grid-cols-5 gap-1 p-2 bg-white shadow-md rounded border max-w-[220px]">
    {colorPalette.flat().map(color => (
      <button
        key={color}
        type="button"
        title={color}
        className="w-6 h-6 rounded"
        style={{ backgroundColor: color }}
        onClick={() => onSelect(color)}
      />
    ))}
  </div>
);

export const EditorToolbar: React.FC<EditorToolbarProps> = ({ editor, onAddBlock }) => {
  const [activeTab, setActiveTab] = useState<'file' | 'home' | 'insert' | 'layout'>('home');
  const [showFileMenu, setShowFileMenu] = useState(false);
  const [fontDropdownOpen, setFontDropdownOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [recentFonts, setRecentFonts] = useState<string[]>([]);
  const [showTextColorPicker, setShowTextColorPicker] = useState(false);
  const [showHighlightColorPicker, setShowHighlightColorPicker] = useState(false);

  const dropdownRef = useRef<HTMLDivElement>(null);
  const textColorRef = useRef<HTMLDivElement>(null);
  const highlightColorRef = useRef<HTMLDivElement>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  const highlightAttr = editor.getAttributes('highlight');
  const bgColor = highlightAttr.color || '#fff';

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à—Ä–∏—Ñ—Ç–∞
  const currentFont = (editor.getAttributes('textStyle') as any).fontFamily || 'Times New Roman';

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        dropdownRef.current && !dropdownRef.current.contains(event.target as Node) &&
        textColorRef.current && !textColorRef.current.contains(event.target as Node) &&
        highlightColorRef.current && !highlightColorRef.current.contains(event.target as Node)
      ) {
        setFontDropdownOpen(false);
        setSearchTerm('');
        setShowTextColorPicker(false);
        setShowHighlightColorPicker(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const onSelectFont = (font: string) => {
    editor.chain().focus().setFontFamily(font).run();
    setFontDropdownOpen(false);
    setSearchTerm('');
    setRecentFonts(prev => {
      const newList = [font, ...prev.filter(f => f !== font)];
      return newList.slice(0, 5);
    });
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredFonts = fontOptions
    .sort((a, b) => a.localeCompare(b))
    .filter(f => f.toLowerCase().includes(searchTerm.toLowerCase()));

  if (!editor) return null;

  return (
    <div className="sticky top-0 z-50 bg-white shadow-md border-b px-4 py-2 w-full">
      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="flex border-b mb-2">
        {(['file', 'home', 'insert', 'layout'] as const).map(tab => (
          <button
            key={tab}
            className={`px-4 py-2 font-medium ${
              activeTab === tab ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600 hover:text-blue-500'
            }`}
            onClick={() => {
              setActiveTab(tab);
              setShowFileMenu(false);
            }}
            type="button"
          >
            {tab === 'file' ? '–§–∞–π–ª' : tab === 'home' ? '–ì–ª–∞–≤–Ω–∞—è' : tab === 'insert' ? '–í—Å—Ç–∞–≤–∫–∞' : '–ú–∞–∫–µ—Ç'}
          </button>
        ))}
      </div>

      <div className="flex flex-wrap gap-4 relative">
        {/* –í–∫–ª–∞–¥–∫–∞ –§–∞–π–ª */}
        {activeTab === 'file' && (
          <div>
            <button
              type="button"
              className="bg-gray-100 px-4 py-2 rounded shadow hover:bg-gray-200"
              onClick={() => setShowFileMenu(prev => !prev)}
            >
              üìÅ –ú–µ–Ω—é —Ñ–∞–π–ª–∞
            </button>
            {showFileMenu && (
              <div className="absolute mt-2 bg-white border rounded shadow z-50 w-48">
                <button
                  type="button"
                  onClick={() => {
                    console.log('Export document');
                    setShowFileMenu(false);
                  }}
                  className="w-full text-left px-4 py-2 hover:bg-gray-100"
                >
                  üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
              </div>
            )}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –ì–ª–∞–≤–Ω–∞—è */}
        {activeTab === 'home' && (
  <>
    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞–º–∏ */}
    <div className="flex flex-col border-r pr-4 min-w-[140px]">
      <span className="text-sm font-semibold text-gray-500 mb-1">–ë–ª–æ–∫–∏</span>
      <button
        type="button"
        onClick={onAddBlock}
        className="bg-blue-600 text-white px-3 py-1 mb-2 rounded hover:bg-blue-700 flex items-center gap-2"
      >
        <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å
      </button>
      <button
        type="button"
        disabled
        className="bg-gray-300 text-white px-3 py-1 rounded cursor-not-allowed flex items-center gap-2"
      >
        <FaTrash /> –£–¥–∞–ª–∏—Ç—å
      </button>
    </div>

    {/* –û—Ç–¥–µ–ª —à—Ä–∏—Ñ—Ç–∞ ‚Äî –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ */}
    <div className="flex flex-col ml-4 max-w-max">
      <span className="text-sm font-semibold text-gray-500 mb-1">–®—Ä–∏—Ñ—Ç</span>
      {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —à—Ä–∏—Ñ—Ç, —Ä–∞–∑–º–µ—Ä –∏ +/- */}
      <div className="flex gap-4 mb-2 items-center flex-wrap">
        {/* –®—Ä–∏—Ñ—Ç */}
        <div className="flex-1 relative" ref={dropdownRef}>
          <button
            type="button"
            className="w-full border px-3 py-1 rounded bg-white text-left cursor-pointer"
            onClick={() => setFontDropdownOpen(open => !open)}
            style={{ fontFamily: currentFont }}
          >
            {currentFont}
          </button>

          {fontDropdownOpen && (
            <div className="absolute z-50 bg-white border rounded shadow mt-1 max-h-60 overflow-auto w-full">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–∞..."
                value={searchTerm}
                onChange={e => setSearchTerm(e.target.value)}
                className="w-full px-3 py-1 border-b outline-none"
                autoFocus
              />

              {recentFonts.length > 0 && (
                <div className="p-2 border-b">
                  <div className="text-xs font-semibold text-gray-600 mb-1">–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ</div>
                  {recentFonts.map(font => (
                    <div
                      key={font}
                      onClick={() => onSelectFont(font)}
                      className="cursor-pointer px-2 py-1 rounded hover:bg-blue-100"
                      style={{ fontFamily: font }}
                    >
                      {font}
                    </div>
                  ))}
                </div>
              )}

              <div className="p-2">
                {filteredFonts.length > 0 ? (
                  filteredFonts.map(font => (
                    <div
                      key={font}
                      onClick={() => onSelectFont(font)}
                      className="cursor-pointer px-2 py-1 rounded hover:bg-blue-100"
                      style={{ fontFamily: font }}
                    >
                      {font}
                    </div>
                  ))
                ) : (
                  <div className="text-gray-500 px-2 py-1">–®—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* –†–∞–∑–º–µ—Ä –∏ –∫–Ω–æ–ø–∫–∏ */}
        <div className="flex items-center gap-1 min-w-[160px]">
          <select
            className="border px-2 py-1 rounded bg-gray-50 w-full"
            value={(editor.getAttributes('textStyle') as any).fontSize || 14}
            onChange={e => {
              let val = Number(e.target.value);
              if (val < 8) val = 8;
              else if (val > 64) val = 64;
              editor.chain().focus().setFontSize(val).run();
            }}
          >
            {[8,10,12,14,16,18,20,24,28,32,36,40,44,48,52,56,60,64].map(size => (
              <option key={size} value={size}>{size}</option>
            ))}
          </select>

          <button
            type="button"
            className="p-2 border rounded hover:bg-gray-200 flex items-center justify-center"
            onClick={() => {
              const currentSize = (editor.getAttributes('textStyle') as any).fontSize || 14;
              const newSize = Math.min(currentSize + 1, 64);
              editor.chain().focus().setFontSize(newSize).run();
            }}
            title="–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
          >
            <FaPlus />
          </button>

          <button
            type="button"
            className="p-2 border rounded hover:bg-gray-200 flex items-center justify-center"
            onClick={() => {
              const currentSize = (editor.getAttributes('textStyle') as any).fontSize || 14;
              const newSize = Math.max(currentSize - 1, 8);
              editor.chain().focus().setFontSize(newSize).run();
            }}
            title="–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
          >
            <FaMinus />
          </button>
        </div>
      </div>

      {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç–∞ */}
      <div className="flex gap-2 flex-wrap items-center">
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleBold().run()}
          className={`p-2 rounded ${editor.isActive('bold') ? 'bg-blue-600 text-white' : 'hover:bg-gray-200'}`}
          title="–ñ–∏—Ä–Ω—ã–π (Ctrl+B)"
        >
          <FaBold />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleItalic().run()}
          className={`p-2 rounded ${editor.isActive('italic') ? 'bg-blue-600 text-white' : 'hover:bg-gray-200'}`}
          title="–ö—É—Ä—Å–∏–≤ (Ctrl+I)"
        >
          <FaItalic />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleUnderline().run()}
          className={`p-2 rounded ${editor.isActive('underline') ? 'bg-blue-600 text-white' : 'hover:bg-gray-200'}`}
          title="–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π"
        >
          <FaUnderline />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleStrike().run()}
          className={`p-2 rounded ${editor.isActive('strike') ? 'bg-blue-600 text-white' : 'hover:bg-gray-200'}`}
          title="–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π"
        >
          <FaStrikethrough />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleSuperscript().run()}
          className={`p-2 rounded ${editor.isActive('superscript') ? 'bg-blue-600 text-white' : 'hover:bg-gray-200'}`}
          title="–ù–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–π"
        >
          <FaSuperscript />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleSubscript().run()}
          className={`p-2 rounded ${editor.isActive('subscript') ? 'bg-blue-600 text-white' : 'hover:bg-gray-200'}`}
          title="–ü–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–π"
        >
          <FaSubscript />
        </button>

        {/* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */}
        <div className="relative" ref={textColorRef}>
          <span className="sr-only">–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</span>
          <button
            type="button"
            className="w-10 h-8 rounded border flex items-center justify-center"
            style={{ backgroundColor: (editor.getAttributes('textStyle') as any).color || '#000000' }}
            onClick={() => {
              setShowTextColorPicker(show => !show);
              setShowHighlightColorPicker(false);
            }}
            title="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
          >
            <FaFont color="#fff" />
          </button>
          {showTextColorPicker && (
            <ColorPicker onSelect={color => {
              editor.chain().focus().setColor(color).run();
              setShowTextColorPicker(false);
            }} />
          )}
        </div>

        {/* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ */}
        <div className="relative" ref={highlightColorRef}>
          <span className="sr-only">–¶–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏</span>
          <button
            type="button"
            className="w-10 h-8 rounded border flex items-center justify-center"
            style={{ backgroundColor: bgColor }}
            onClick={() => {
              setShowHighlightColorPicker(show => !show);
              setShowTextColorPicker(false);
            }}
            title="–¶–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏"
          >
            <FaFillDrip color="#fff" />
          </button>
          {showHighlightColorPicker && (
            <ColorPicker onSelect={color => {
              editor.chain().focus().setHighlight({ color }).run();
              setShowHighlightColorPicker(false);
            }} />
          )}
        </div>
      </div>
    </div>
  </>
)}


        {/* –í–∫–ª–∞–¥–∫–∞ –í—Å—Ç–∞–≤–∫–∞ */}
        {activeTab === 'insert' && (
          <div className="flex items-center gap-4">
            <button
              type="button"
              onClick={() => {
                editor.chain().focus().setHorizontalRule().run();
              }}
              className="px-4 py-2 bg-gray-100 rounded hover:bg-gray-200"
              title="–í—Å—Ç–∞–≤–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é"
            >
              ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            </button>
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –ú–∞–∫–µ—Ç */}
        {activeTab === 'layout' && (
          <div className="text-gray-600 italic">–ú–∞–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω</div>
        )}
      </div>
    </div>
  );
};
