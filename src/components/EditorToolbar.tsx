import React, { useState, useEffect, useRef } from 'react';
import { Editor } from '@tiptap/react';
import { 
  FaPlus, FaTrash, FaBold, FaItalic, FaStrikethrough, FaUnderline, 
  FaSuperscript, FaSubscript, FaFont, FaFillDrip, 
  FaAlignLeft, FaAlignCenter, FaAlignRight, FaAlignJustify 
} from 'react-icons/fa';

interface EditorToolbarProps {
  editor: Editor;
  onAddBlock: () => void;
}

const fontOptions = [
  'Arial', 'Arial Black', 'Brush Script MT', 'Calibri', 'Cambria', 'Candara', 'Comic Sans MS', 'Consolas',
  'Constantia', 'Corbel', 'Courier New', 'Franklin Gothic Medium', 'Garamond', 'Georgia', 'Gill Sans',
  'Helvetica', 'Impact', 'Lucida Console', 'Lucida Sans Unicode', 'Optima', 'Palatino Linotype', 'Segoe Print',
  'Segoe Script', 'Segoe UI', 'Tahoma', 'Times New Roman', 'Trebuchet MS', 'Verdana',
];

// –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
const sortedFonts = [...fontOptions].sort((a, b) => a.localeCompare(b));

export const EditorToolbar: React.FC<EditorToolbarProps> = ({ editor, onAddBlock }) => {
  const [activeTab, setActiveTab] = useState<'file' | 'home' | 'insert' | 'layout'>('home');
  const [showFileMenu, setShowFileMenu] = useState(false);

  // –î–ª—è –¥—Ä–æ–ø–¥–∞—É–Ω–∞ —Å —à—Ä–∏—Ñ—Ç–∞–º–∏
  const [fontDropdownOpen, setFontDropdownOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [recentFonts, setRecentFonts] = useState<string[]>([]);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
  const currentFont = (editor.getAttributes('textStyle') as any).fontFamily || 'Times New Roman';

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setFontDropdownOpen(false);
        setSearchTerm('');
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —à—Ä–∏—Ñ—Ç–∞
  const onSelectFont = (font: string) => {
    editor.chain().focus().setFontFamily(font).run();
    setFontDropdownOpen(false);
    setSearchTerm('');

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤, –º–∞–∫—Å–∏–º—É–º 5)
    setRecentFonts(prev => {
      const newList = [font, ...prev.filter(f => f !== font)];
      return newList.slice(0, 5);
    });
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É (case insensitive)
  const filteredFonts = sortedFonts.filter(f => f.toLowerCase().includes(searchTerm.toLowerCase()));

  if (!editor) return null;

  return (
    <div className="sticky top-0 z-50 bg-white shadow-md border-b px-4 py-2 w-full">
      <div className="flex border-b mb-2">
        {(['file', 'home', 'insert', 'layout'] as const).map(tab => (
          <button
            key={tab}
            className={`px-4 py-2 font-medium ${activeTab === tab ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600 hover:text-blue-500'}`}
            onClick={() => {
              setActiveTab(tab);
              setShowFileMenu(false);
            }}
          >
            {tab === 'file' ? '–§–∞–π–ª' : tab === 'home' ? '–ì–ª–∞–≤–Ω–∞—è' : tab === 'insert' ? '–í—Å—Ç–∞–≤–∫–∞' : '–ú–∞–∫–µ—Ç'}
          </button>
        ))}
      </div>

      <div className="flex flex-wrap gap-4 relative">
        {activeTab === 'file' && (
          <div>
            <button
              className="bg-gray-100 px-4 py-2 rounded shadow hover:bg-gray-200"
              onClick={() => setShowFileMenu(prev => !prev)}
            >
              üìÅ –ú–µ–Ω—é —Ñ–∞–π–ª–∞
            </button>
            {showFileMenu && (
              <div className="absolute mt-2 bg-white border rounded shadow z-50 w-48">
                <button
                  onClick={() => {
                    console.log('Export document');
                    setShowFileMenu(false);
                  }}
                  className="w-full text-left px-4 py-2 hover:bg-gray-100"
                >
                  üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
              </div>
            )}
          </div>
        )}

        {activeTab === 'home' && (
          <>
            {/* –ë–ª–æ–∫–∏ */}
            <div className="flex flex-col border-r pr-4">
              <span className="text-sm font-semibold text-gray-500 mb-1">–ë–ª–æ–∫–∏</span>
              <button
                onClick={onAddBlock}
                className="bg-blue-600 text-white px-3 py-1 mb-2 rounded hover:bg-blue-700 flex items-center gap-2"
              >
                <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å
              </button>
              <button
                disabled
                className="bg-gray-300 text-white px-3 py-1 rounded cursor-not-allowed flex items-center gap-2"
              >
                <FaTrash /> –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>

            {/* –®—Ä–∏—Ñ—Ç */}
            <div className="flex flex-col border-r pr-4 min-w-[280px]" ref={dropdownRef}>
              <span className="text-sm font-semibold text-gray-500 mb-1">–®—Ä–∏—Ñ—Ç</span>

              {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥—Ä–æ–ø–¥–∞—É–Ω */}
              <div className="relative">
                <button
                  className="w-full border px-3 py-1 rounded bg-white text-left cursor-pointer"
                  onClick={() => setFontDropdownOpen(open => !open)}
                  style={{ fontFamily: currentFont }}
                >
                  {currentFont}
                </button>

                {fontDropdownOpen && (
                  <div className="absolute z-50 bg-white border rounded shadow mt-1 max-h-60 overflow-auto w-full">
                    {/* –ü–æ–∏—Å–∫ */}
                    <input
                      type="text"
                      placeholder="–ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–∞..."
                      value={searchTerm}
                      onChange={e => setSearchTerm(e.target.value)}
                      className="w-full px-3 py-1 border-b outline-none"
                      autoFocus
                    />

                    {/* –ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ */}
                    {recentFonts.length > 0 && (
                      <div className="p-2 border-b">
                        <div className="text-xs font-semibold text-gray-600 mb-1">–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ</div>
                        {recentFonts.map(font => (
                          <div
                            key={font}
                            onClick={() => onSelectFont(font)}
                            className="cursor-pointer px-2 py-1 rounded hover:bg-blue-100"
                            style={{ fontFamily: font }}
                          >
                            {font}
                          </div>
                        ))}
                      </div>
                    )}

                    {/* –í—Å–µ —à—Ä–∏—Ñ—Ç—ã */}
                    <div className="p-2">
                      {filteredFonts.length > 0 ? filteredFonts.map(font => (
                        <div
                          key={font}
                          onClick={() => onSelectFont(font)}
                          className="cursor-pointer px-2 py-1 rounded hover:bg-blue-100"
                          style={{ fontFamily: font }}
                        >
                          {font}
                        </div>
                      )) : (
                        <div className="text-gray-500 px-2 py-1">–®—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥: —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞, —Å—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            <div className="flex flex-col border-r pr-4 min-w-[120px]">
              <span className="text-sm font-semibold text-gray-500 mb-1">–†–∞–∑–º–µ—Ä</span>
              <select
                className="border px-2 py-1 rounded bg-gray-50"
                onChange={e => editor.chain().focus().setFontSize(Number(e.target.value)).run()}
                value={(editor.getAttributes('textStyle') as any).fontSize || 14}
              >
                {[10, 12, 14, 16, 18, 20, 24, 28, 32].map(size => (
                  <option key={size} value={size}>{size}</option>
                ))}
              </select>
            </div>

            <div className="flex flex-col border-r pr-4">
              <span className="text-sm font-semibold text-gray-500 mb-1">–°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞</span>
              <div className="flex flex-wrap gap-1 items-center">
                {[{ icon: FaBold, command: 'toggleBold', label: '–ñ–∏—Ä–Ω—ã–π' },
                  { icon: FaItalic, command: 'toggleItalic', label: '–ö—É—Ä—Å–∏–≤' },
                  { icon: FaStrikethrough, command: 'toggleStrike', label: '–ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π' },
                  { icon: FaUnderline, command: 'toggleUnderline', label: '–ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π' },
                  { icon: FaSuperscript, command: 'toggleSuperscript', label: '–ù–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–π' },
                  { icon: FaSubscript, command: 'toggleSubscript', label: '–ü–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–π' }]
                  .map(({ icon: Icon, command, label }) => (
                    <button
                      key={command}
                      onClick={() => (editor.chain().focus() as any)[command]().run()}
                      title={label}
                      className={`p-1 ${editor.isActive(command.replace('toggle', '').toLowerCase()) ? 'bg-blue-100' : ''}`}
                    >
                      <Icon />
                    </button>
                  ))}

                <label className="flex items-center gap-1" title="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞">
                  <FaFont />
                  <input
                    type="color"
                    onChange={e => (editor.chain() as any).focus().setColor(e.target.value).run()}
                    value={editor.getAttributes('textStyle').color || '#000000'}
                  />
                </label>

                <label className="flex items-center gap-1" title="–¶–≤–µ—Ç —Ñ–æ–Ω–∞">
                  <FaFillDrip />
                  <input
                    type="color"
                    onChange={e => (editor.chain() as any).focus().setHighlight({ color: e.target.value }).run()}
                    value={editor.getAttributes('highlight')?.color || '#ffffff'}
                  />
                </label>
              </div>
            </div>

            <div className="flex flex-col border-r pr-4">
              <span className="text-sm font-semibold text-gray-500 mb-1">–ê–±–∑–∞—Ü</span>
              <div className="flex gap-2 items-center">
                {[{ icon: FaAlignLeft, align: 'left' },
                  { icon: FaAlignCenter, align: 'center' },
                  { icon: FaAlignRight, align: 'right' },
                  { icon: FaAlignJustify, align: 'justify' }]
                  .map(({ icon: Icon, align }) => (
                    <button
                      key={align}
                      onClick={() => editor.chain().focus().setTextAlign(align).run()}
                      title={`–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: ${align}`}
                      className={`p-1 ${editor.isActive({ textAlign: align }) ? 'bg-blue-100' : ''}`}
                    >
                      <Icon />
                    </button>
                  ))}
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};
